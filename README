This is just a demo for git usage!

/********  git   usage  *********/

###########本地仓库管理

config ：git config user.name “fengwuxuan”  
         git config user.email ***@***

git add files : 暂存文件，可以用*暂存所有问津

.gitignore : 忽略某些文件，可以采用正则匹配，*.so 忽略所有so文件  *.[oa] 忽略所有的.o和.a文件

git diff [file] : 查看具体文件修改了那些内容，前提是文件还没有暂存或者提交，也可以直接git diff查看所有的改动,要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）,单单 git diff 不过是显示还没有暂存起来的改动，而不是这次工作和上次提交之间的差异。所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因.

git commit:可以在首行添加此次提交的信息：# 提交信息  利用git commit -m “提交信息”提交（这才是真正的提交）。可以修改git commit的编辑工具git config --global core.editor vim。
           Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。
	   git commit --amend 撤销提交并重新提交。

git rm : 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。若需要删除文件需要手动删除文件并git rm，该文件就不会出现在仓库中了。

git checkout -- file ：命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。

git mv ：移动文件或者重命名。

git log ：查看提交历史，-p查看提交差异。Git 提供了 --word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比。
          --stat 统计改变的行数

git reset HEAD ：取消已经暂存的文件。git reset --hard commit id 可以用于版本回退，若将id替换为HEAD就是当前commit版本，它是一个指针，指向不同commit版本，通过移动它来进行版本选择。版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
版本回退 ：每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复。git log输出的有commit的id，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数。
当回退后想回到最新版本时，可以用git reflog查看自己的每一次命令，可以找到每次回退时的commit id，这样就能够回到最新版本了。

###########远程仓库管理

git remote : 查看远程仓库列表 -v 显示git地址
