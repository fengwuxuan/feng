This is just a demo for git usage!

/********  git   usage  *********/

###########本地仓库管理

config ：git config user.name “fengwuxuan”  
         git config user.email ***@***

git add files : 增加跟踪的暂存文件，可以用*暂存所有文件，文件通过该方式加入暂存文件表，如果不加入，commit的时候是不会被更新到版本库的。

.gitignore : 忽略某些文件，可以采用正则匹配，*.so 忽略所有so文件  *.[oa] 忽略所有的.o和.a文件

git diff [file] : 查看具体文件修改了那些内容，前提是文件还没有暂存或者提交，也可以直接git diff查看所有的改动,要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）,单单 git diff 不过是显示还没有暂存起来的改动，而不是这次工作和上次提交之间的差异。所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因.

git commit:可以在首行添加此次提交的信息：# 提交信息  利用git commit -m “提交信息”提交（这才是真正的提交）。可以修改git commit的编辑工具git config --global core.editor vim。
           Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。
	   git commit --amend 撤销提交并重新提交。

git rm : 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。若需要删除文件需要手动删除文件并git rm，该文件就不会出现在仓库中了。

git checkout -- file ：命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态，但是如果commit之后就不行了。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。

git mv ：移动文件或者重命名。

git log ：查看提交历史，-p查看提交差异。Git 提供了 --word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比。
          --stat 统计改变的行数

git reset HEAD ：取消已经暂存的文件,可以指定file，从暂存区恢复，修复git checkout的缺陷。git reset --hard commit id 可以用于版本回退，若将id替换为HEAD就是当前commit版本，它是一个指针，指向不同commit版本，通过移动它来进行版本选择。版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
版本回退 ：每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复。git log输出的有commit的id，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数。
当回退后想回到最新版本时，可以用git reflog查看自己的每一次命令，可以找到每次回退时的commit id，这样就能够回到最新版本了。

###########远程仓库管理

需要先配置ssh keys，ssh-keygen -t rsa -C "youremail@example.com"，生成id_rsa和id_rsa.pub文件，一路默认即可，然后在github账户的SSH Keys中新建ssh key并添加id_rsa.pub内容。

git remote : 查看远程仓库列表 -v 显示git地址
git remote add origin https://github.com/tensorflow/models.git 增加远程仓库。origin是远程仓库名，可以改成别的。
git remote remove nam : 移除
git remote rename old new : 重命名
git remote show name : 查看仓库信息

git fetch : 从远程获取最新版本到本地，不会自动merge

git merge : 合并

git pull origin master: 相当于fetch+merge

git push origin master : 推送到远程仓库。
有些时候由于邮件的私密可能会导致push失败，在github账号的emails设置中取消Block command line pushes that expose my email勾选。
为了防止每次push都输入用户名和密码，在本地仓库的.git/config文件中加入如下信息,即可保存用户名和密码
[credential]
    helper = store
当远程推送被拒绝时，若是由于当前版本和master不兼容，那么需要先进行Git pull进行整理合并，然后再进行推送。


####################打标签

git tag ；列出现有的标签,标签是对某一时间点上的版本打上标签. git tag -l 'v1.4.2.*' 显示部分标签

git tag -a v1.4 -m 'my version 1.4' : -a表示增加标签,-m添加说明信息,这是一个含有附注信息的标签,轻量级的标签不添加附注信息.直接用 git tag name

git show : 查看当前版本信息.

git push origin [tagname] : 才能分享标签到远程分支,否则不会分享,若需要全部分享使用 --tags选项即可


##################技巧

将source ~/.git-completion.bash加入bashrc中即可享受自动补全输入

git config --global alias.co checkout 命令别名为co

##################分支
Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的
master 分支，它在每次提交的时候都会自动向前移动。git保存着一个名为 HEAD 的特别指针，保存着当前分支的指针。由于 Git 中的分支实际上仅是一个包含所指对象校验和
（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也
就很快了。

git branch name :创建分支name，他也只是在本地创建了一个本地分支，还没有从master分支切换出来，他实际上就是创建了一个指向当前commit对象的指针。

git checkout name：转到分支name，此时任何改动再进行commit都会被提交到name分支。所谓转移也不过是将HEAD指针指向name指针。

git checkout -b name：创建name分支并转到该分支，相当于上面两个分支的合并。

git merge name：分支合并，将当前分支和master分支进行合并，这有利于对工程进行修改。

git branch -d name：删除某个分支。

git status：当合并收到冲突时可以用他来查看冲突原因。

git branch：列出当前所有的分支，当前分支名称前会有一个*符号，--merged参数会列出已经被合并的分支。

git push labname name：将本地分支name推送到远程仓库。同理fetch是可以获取远程分支的。

git checkout --track labname/name：跟踪远程分支。

git push labname：name：删除某个分支，也是够奇葩的命令

git rebase name：将当前分支的改变在name分支里面重新做一遍，相当于合并。

####################协议
Git 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。

最基本的就是本地协议（Local protocol），所谓的远程仓库在该协议中的表示，就是硬盘上的另一个目录。这常见于团队每一个成员都对一个共享的文件系统（例如 NFS）
拥有访问权，或者比较少见的多人共用同一台电脑的情况。后面一种情况并不安全，因为所有代码仓库实例都储存在同一台电脑里，增加了灾难性数据损失的可能性。
git clone /opt/git/project.git
git clone file:///opt/git/project.git二者都是对本地仓库的克隆，但如果在 URL 开头明确使用 file:// ，那么 Git 会以一种略微不同的方式运行。如果你只给出
路径，Git 会尝试使用硬链接或直接复制它所需要的文件。如果使用了 file:// ，Git 会调用它平时通过网络来传输数据的工序，而这种方式的效率相对较低。
git remote add local_proj /opt/git/project.git：添加一个本地的远程仓库

Git 使用的传输协议中最常见的可能就是 SSH 了，SSH 也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（HTTP 和 Git）通常都是只读的，所以虽然二者对大
多数人都可用，但执行写操作时还是需要 SSH。SSH 同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。缺点在于不能实现匿名访问了。
git clone ssh://user@server/project.git
git clone user@server:project.git（当不指定协议时，默认的就是ssh）

git协议是一个包含在 Git 软件包中的特殊守护进程； 它会监听一个提供类似于 SSH 服务的特定端口（9418），而无需任何授权。打算支持 Git 协议的仓库，需要先创建 
git-daemon-export-ok 文件 — 它是协议进程提供仓库服务的必要条件 — 但除此之外该服务没有什么安全措施。要么所有人都能克隆 Git 仓库，要么谁也不能。这也意味
着该协议通常不能用来进行推送。

HTTP 或 HTTPS 协议的优美之处在于架设的简便性。基本上，只需要把 Git 的裸仓库文件放在 HTTP 的根目录下，配置一个特定的 post-update 挂钩（hook）就可以搞定,
但是缺点在于效率更低，克隆或者下载仓库内容可能会花费更多时间，而且 HTTP 传输的体积和网络开销比其他任何一个协议都大。
git clone http://example.com/gitproject.git

#######################服务器git

git clone --bare my_project my_project.git:将现有仓库导出为裸仓库（即一个不包含当前工作目录的仓库），相当于git init创建空目录，然后执行git fetch

scp -r my_project.git user@git.example.com:/opt/git：将仓库部署到服务器上，注意是ssh协议部署。然后团队中的人访问有三个办法：第一是给每个人建立一个账
户，直截了当但略过繁琐。反复运行 adduser 并给所有人设定临时密码可不是好玩的。第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公
钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。这样一来，所有人都将通过 git 账户访问主机。这丝毫不会影响提交的数据 — 访问主机用的身份不会影
响提交对象的提交者信息。另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。只要每个人都能获得主机的 shell 访问权
，任何可用的 SSH 授权机制都能达到相同效果。

ssh-keygen:生成服务器公钥，一般是在.ssh文件夹中
ssh-copy-id example.com：将自己的公钥提交到服务器。

架设服务器：创建一个git账户，然后将所有人的公钥逐个追加到该账户.ssh文件夹下authorized_keys 文件尾部即可
git --bare init：创建一个裸仓库，这样成员们就可以以他为仓库进行操作了
你可以用 Git 自带的 git-shell 工具限制 git 用户的活动范围。只要把它设为 git 用户登入的 shell，那么该用户就无法使用普通的 bash 或者 csh 什么的 shell 程序。
具体方法是修改passwd文件，将其bin/sh 改为 /usr/bin/git-shell。

公共访问：即实现匿名访问，需要开启挂钩以及服务器配置，具体参见https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%85%AC%E5%85%B1%E8%AE%BF%E9%97%AE

工具：gitweb,web访问的客户端，gitosis，公钥管理，gitolite，是在Git之上的一个授权层，依托sshd或者httpd来进行认证。

#######################工作流

集成管理员工作流
由于 Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有
个代表着官方发布的项目仓库（blessed repository），开发者们由此仓库克隆出一个自己的公共仓库（developer public），然后将自己的提交推送上去，请求官方仓库
的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（integration manager），他可以将你的公共仓库作为远程仓库添加进来，经过测试无误后合并到主
干分支，然后再推送到官方仓库。工作流程如下：

项目维护者可以推送数据到公共仓库 blessed repository。
贡献者克隆此仓库，修订或编写新代码。
贡献者推送数据到自己的公共仓库 developer public。
贡献者给维护者发送邮件，请求拉取自己的最新修订。
维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。
维护者将合并后的更新推送到主仓库 blessed repository。

司令官与副官工作流
这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。各个集成管理员分别负责集成项目中的特定
部分，所以称为副官（lieutenant）。而所有这些集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最
新集成的项目代码。整个流程如下：

一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的 master）衍合。
副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。
司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。
司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，以便所有其他开发者以此为基础进行衍合。

#######################自定义git
git config --global commit.template $HOME/.gitmessage.txt：设置git提交的模板信息
git config --global core.pager less：设置分页器，默认是less
git config --global color.ui true：设置着色
git config --global core.autocrlf true：设置换行总是LF，因为windows是回车加LF才换行，与Linux仅仅LF换行不同。
