1. builtins functions:
   1) abs、all、any、ascii、bin(x)[转为二进制]、callable、compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)、delattr、setattr、getattr、hasattr、hash、hex、divmod(a,b)[返回商，余数的tuple]、enumerate[返回的是枚举类型，有__next__方法]、eval(expression, globals=None, locals=None)、exec、id、input、isinstance、insubclass、len、iter、max、min、next(iter)、open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)、pow(x, y[, z])[z表示将结果对z求余数]、range(start, stop[, step])、reverse(seq)、round()、sum、tuple、type、zip、__import__(name, globals=None, locals=None, fromlist=(), level=0)
   2) class对象：bool、bytearray、bytes[不可变对象]、complex([real[, imag]])、dict、float、int、list、object、set
   3) @classmethod ：将函数转为类方法，一般在类内定义的方法都只能用对象来调用，加上它可用类名调用也可以用对象调用,它是一个包装器
      class C(object):
          @classmethod
          def f()...
   4) chr(x)[转为单字符]:x是整数  与之相反的是ord(x):将字符x转为数字，oct(x)：将整数转为8进制字符串
   5) dir([object]): 如果没有参数则返回局部作用域的属性，否则返回对象的属性，如果对象有定义的__dir__()方法将第一时间被调用，其尝试用__getattr__或者__getattribute__等自定义方法获取属性。如果没有__dir__则访问__dict__属性。
   6) globals()返回全局域的符号dict、locals()返回当前局部域的符号dict。
   7) help(object):可以查看对象的帮助信息，交互环境下debug很有用。
   8) filter、map：filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。同样也要用list()强制计算。
   9) memoryview(obj)：查看对象的内存情况，具体查看memory view模块。
   10) print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)：注意分割符、尾符、文件、刷新的选择。
   11) class property(fget=None, fset=None, fdel=None, doc=None):意为属性的属性，假设类A有属性x，有方法getx、delx、setx，在类内使用x = property(getx,setx,delx,"this is property of x"), 或者作为修饰器将某个方法的访问方式改成属性方式，它还有setter、gettter、delter等包装器
       @property
       def f()....    访问class.f
   12) repr(object)、类对象能够通过自己的__repr__()方法控制外部repr的输出。str与repr、__str__与__repr__区别在于缺省实现是没用的，__repr__的目标是准确性，__str__的目标是可读性，容器的__str__使用包含了对象的__repr__
   13) @staticmethod: 将类函数转为静态函数，是一个包装器。
   14）super() 函数是用于调用父类(超类)的一个方法。super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。super([type[, object-or-type]])
   15）vars:返回对象的__dict__属性

2. builtin-type：
   1) Truth value testing:对于一个object，其可被测试真值需要实现__bool__()方法或者__len__方法返回0（表示false）。
   2) Iterator Types: Iterable、Iterator都有__iter__方法，后者还需事先__next__方法，同时后者可以直接被next函数调用直至抛出StopIteration异常。凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列，意味着想要像直接访问必须用list等函数强转，否则只能用next或者for；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。Python的for循环本质上就是通过不断调用next()函数实现的
   3) Generator Types：常用()生成式或者yield语句与函数结合。也是在for中可以循环。
   4) memoryview(obj):查看obj的内部存储情况，不进行copy。返回一个memoryview对象，操作类似tuple。支持索引切片等等。属性有readonly、contiguous、shape、nbytes、format、ndim、strides、itemsize等，方法有cast、hex、release、tobytes、tolist，注意到其实现了__enter__\__exit__，说明是可以与with连用的
   
3. 文本处理
   1) re:正则表达式
   2) difflib: 比较文本差异，SequenceMatcher类：提供比较两个文本序列的方法，包括获取匹配段、相似度等。Differ类提供compare(a,b)函数可以将两段文本的不同之处提出到一个惰性序列，用list强转可以获取快速访问。提供的还有HTMLDiffer及其他函数。
   3) textwrap：针对多行文本进行包装与填充，以及缩进、去缩进等操作。
   4) stringprep：网络字符串处理
   5) readline：读写python历史文件，与 rlcompleter协同作用。
   6) codecs：python 编码、解码模块。

5. 数值部分
   1) numbers:数值基类库，主要有实数、虚数、有理数、积分等基类
   2) math、cmath数值计算库，后者是复数的
   3) decimal：小数库
   4) fraction:分数库
   5）random库：
      seed、getstate、setstate、choice[选出一个]、choices[可选出多个]、randrange、radint、sample、shuffle等函数以及其他各种概率分布。
   6) statistics：统计模块，均值、方差、协方差等等。
