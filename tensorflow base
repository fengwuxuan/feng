一、基本流程

Estimator：Estimator 是 TensorFlow 对完整模型的高级表示。使用它有两种方式：利用已经完整实现tf.estimator.Estimator的衍生类，另外就是实例化tf.estimator.Estimator,具体操作会在下面讲述。

1. 基本流程：
   创建一个或多个输入函数。
   定义模型的特征列。
   实例化 Estimator，指定特征列和各种超参数。
   在 Estimator 对象上调用一个或多个方法，传递适当的输入函数作为数据的来源。
2. 输入函数即数据集：输入函数是返回 tf.data.Dataset 对象的函数，此对象会输出下列含有两个元素的元组（即返回值）：
   features - Python 字典，其中：
     每个键都是特征的名称。
     每个值都是包含此特征所有值的数组
   label - 包含每个样本的标签值的数组。
   一般来讲，输入函数会使用tf.data模块的数据集类，具体参见该模块介绍。常用的还是TFRecordDataset。
3. 定义特征列：特征列是一个对象，用于说明模型应该如何使用特征字典中的原始输入数据。在构建 Estimator 模型时，您会向其传递一个特征列的列表，其中包含您希望模型使用的每个特征。tf.feature_column 模块提供很多用于向模型表示数据的选项。注意不同的Estimator支持的特征列类型不同。
   LinearClassifier 和 LinearRegressor：接受所有类型的特征列。
   DNNClassifier 和 DNNRegressor：只接受密集列。其他类型的列必须封装在 indicator_column 或 embedding_column 中。
   DNNLinearCombinedClassifier 和 DNNLinearCombinedRegressor：
   linear_feature_columns 参数接受任何特征列类型。
   dnn_feature_columns 参数只接受密集列
4. 实例化Estimator：通过自己实现的Estimator或者tensorflow支持的Estimator来实例化，传入需要的参数即可。
5. 利用实例化的Estimator来进行训练、评估、预测等操作，它支持众多的函数：train、evaluate、predict等。
6. 检查点：在Estimator构建时指定model_dir即可将模型保存，至多保存五个，使用时会默认从该路径恢复。如果不传递，则会放在/tmp文件夹下，默认情况下每10分钟写入一次，可以通过my_checkpointing_config = tf.estimator.RunConfig创建config传给构造函数，指定保存时间。
7. Estimator
   1）优点：
      您可以在本地主机上或分布式多服务器环境中运行基于 Estimator 的模型，而无需更改模型。此外，您可以在 CPU、GPU 或 TPU 上运行基于 Estimator 的模 型，而无需重新编码模型。
      Estimator 简化了在模型开发者之间共享实现的过程。
      您可以使用高级直观代码开发先进的模型。简言之，采用 Estimator 创建模型通常比采用低阶 TensorFlow API 更简单。
      Estimator 本身在 tf.layers 之上构建而成，可以简化自定义过程。
      Estimator 会为您构建图。也就是说，您不必构建图。
      Estimator 提供安全的分布式训练循环，可以控制如何以及何时：
        构建图
        初始化变量
        开始排队
        处理异常
        创建检查点文件并从故障中恢复
        保存 TensorBoard 的摘要
   2）初始化：
      __init__(
        model_fn,
        model_dir=None,
        config=None,
        params=None,
        warm_start_from=None
      )





