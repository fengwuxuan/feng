#################基础补全（未见的遗忘的不常用的）+ 优化提升#####################
1. whatis commnd: 简要说明命令的信息，一般是其作用。
2. info commnd：更加详细的说明文档，但是从格式上来看不如man简洁明了。
3. which commnd vs whereis commnd：which是查找程序可执行文件（bin）的路径，后者是查看程序的搜索路径，一般包括可执行文件路径、man文件路径
4. updatedb：更新locate命令的索引库，一般搜索不到时可以试试更新
5. head vs tail：分别查看文件的开头和末尾，head -5 file：查看开头几行
6. cat -n：查看时显示行号
7. xargs： 能够将输入数据转化为特定命令的命令行参数，-n指定输出的行数，-d指定界定符
8. uniq： 消除文本中的重复行，常和sort命令一起使用
9. tr： 转换字符，可以进行替换、删除等操作
10. cut vs paste： 切割与合并文本
11. grep： 文本搜索
12. sed： 文本替换利器
13. awk： 数据流处理工具
14. od： od命令用于输出文件的八进制、十六进制或其它格式编码的字节，通常用于显示或查看文件中不能直接显示在终端的字符，eg：od -c file以ascii码显示文本。
15. ps -ef and ps -ajx: 前者查看正在运行的进程，后者列出完成的进程，pstree不要忘了哦，太久没用了
16. pgrep 字段：适合查询只记得部分字段的进程
17. lsof: 列出当前系统打开文件的工具（一切皆文件）。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。
          -a file: 列出打开文件的进程，这里的file可以是普通文件、目录、网络文件系统文件、字符或设备文件、共享库、管道、网络文件
          -c<进程名>: 列出指定进程所打开的文件
          -d<文件号>: 列出占用该文件号的进程
          +d<目录>:  列出目录下被打开的文件
          +D<目录>:  递归列出目录下被打开的文件
          -n<目录>:  列出使用NFS的文件
          -i<条件>:  列出符合条件的进程（4（ipv4）、6（ipv6）、协议（tcp、ip等）、:端口、 @ip ） eg：lsof -i:3306，查看端口3306的占用情况， 
                     lsof -i列出所有的网络连接， lsof -i tcp：列出tcp连接， lsof -4 -a -p 1234：列出所有进程1234打开的ipv4 网络文件
          -p<进程号> 列出指定进程号所打开的文件
          -u  列出UID号进程详情
18. pmap pid：用于输出进程内存的状况，可以用来分析线程堆栈，甚至可以输出调用了哪些共享库。
19. free：查看系统内存使用情况
20. sar：是System Activity Reporter（系统活动情况报告）的缩写。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它
         的特点是可以连续对系统取样，获得大量的取样数据；取样数据和分析的结果都可以存入文件，所需的负载很小。sar是目前Linux上最为全面的系统性能分析工具
         之一，可以从14个大方面对系统的活动进行报告，包括文件的读写情况、系统调用的使用情况、串口、CPU效率、内存使用状况、进程活动及IPC有关的活动等，使
         用也是较为复杂。
         它有两种用法：追溯过去的统计数据（默认）  vs  周期性的查看当前数据，前者默认情况下，sar从最近的0点0分开始显示数据；如果想继续查看一天前的报告；
         可以查看保存在/var/log/sysstat/下的sa日志； 使用sar工具查看:
         
         注意如下命令均可指定 m n， m表示显示间隔， n 表示显示次数
         
         sar -u：查看CPU的利用率。
          %user 用户模式下消耗的CPU时间的比例；
          %nice 通过nice改变了进程调度优先级的进程，在用户模式下消耗的CPU时间的比例
          %system 系统模式下消耗的CPU时间的比例；
          %iowait CPU等待磁盘I/O导致空闲状态消耗的时间比例；
          %steal 利用Xen等操作系统虚拟化技术，等待其它虚拟CPU计算占用的时间比例；
          %idle CPU空闲时间比例；
         
         sar -q: 查看平均负载,指定-q后，就能查看运行队列中的进程数、系统上的进程大小、平均负载等；与其它命令相比，它能查看各项指标随时间变化的情况；
          eg:sar -q 1 10:每一秒显示一次，总计显示10秒
          runq-sz：运行队列的长度（等待运行的进程数）
          plist-sz：进程列表中进程（processes）和线程（threads）的数量
          ldavg-1：最后1分钟的系统平均负载 
          ldavg-5：过去5分钟的系统平均负载
          ldavg-15：过去15分钟的系统平均负载
          blocked：阻塞的进程数（线程）
         
         sar -r： 指定-r之后，可查看物理内存使用状况；
          kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.
          kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.
          %memused：物理内存使用率，这个值是kbmemused和内存总量(不包括swap)的一个百分比.
          kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.
          kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).
          %commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.
         
         sar -W：查看页面交换发生状况，页面发生交换时，服务器的吞吐量会大幅下降；服务器状况不良时，如果怀疑因为内存不足而导致了页面交换的发生，可以使用
          这个命令来确认是否发生了大量的交换；
          pswpin/s：每秒系统换入的交换页面（swap page）数量
          pswpout/s：每秒系统换出的交换页面（swap page）数量
          
         要判断系统瓶颈问题，有时需几个 sar 命令选项结合起来
          怀疑CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看
          怀疑内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看
          怀疑I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看
         -A 汇总所有的报告
         -B 报告页活动
         -b 报告缓存的使用情况
         -d 报告磁盘的使用情况
         -H 报告关于HugePages使用的统计数据
         -m 报告IPC消息队列和信号量的使用情况
         -n 报告newwork的使用情况，关键词有：用法 sar -n keywords
             DEV     Network interfaces
             EDEV    Network interfaces (errors)
             NFS     NFS client
             NFSD    NFS server
             SOCK    Sockets (v4)
             IP      IP traffic      (v4)
             EIP     IP traffic      (v4) (errors)
             ICMP    ICMP traffic    (v4)
             EICMP   ICMP traffic    (v4) (errors)
             TCP     TCP traffic     (v4)
             ETCP    TCP traffic     (v4) (errors)
             UDP     UDP traffic     (v4)
             SOCK6   Sockets (v6)
             IP6     IP traffic      (v6)
             EIP6    IP traffic      (v6) (errors)
             ICMP6   ICMP traffic    (v6)
             EICMP6  ICMP traffic    (v6) (errors)
             UDP6    UDP traffic     (v6)
         -q 报告运行队列和交换队列的平均长度
         -R 内存统计
         -S 交换空间使用情况
         -r 内存利用率
         -u 报告CPU的利用率
         -v 报告进程、i节点、文件和锁表状态
         -w 报告系统交换活动状况
         -y 报告TTY设备活动状况  
21. vmstat：sar替代工具，但性能稍弱，是（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控。他是对系统的整体情况进行统计，不足之处
是无法对某个进程进行深入分析。虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空
间（Swap Space）。作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样
以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。
         Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内存页面。这可以避免
等待交换所需的时间。其次，linux进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经常使用
的页面文件交换到虚拟内存，有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多。最后，交换空间的页面在使用时会首先被交换到物理
内存，如果此时没有足够的物理内存来容纳这些页面，它们又会被马上交换出去，如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假
死机、服务异常等问题，linux虽然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。因此这可能是服务器死机的重要原因之一。
         在Linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面
保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。分页(Page)写入磁盘的过程被称作Page-Out，分页(Page)从磁盘重新回到内存
的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。当系统内核发现可运
行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的
时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作thrashing(颠簸)。
         参数：
          -a：显示活跃和非活跃内存
          -f：显示从系统启动至今的fork数量 。
          -m：显示slabinfo
          -n：只在开始时显示一次各字段名称。
          -s：显示内存相关统计信息及多种系统活动数量。
          delay：刷新时间间隔。如果不指定，只显示一条结果。
          count：刷新次数。如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷。
          -d：显示磁盘相关统计信息
          -p：显示指定磁盘分区统计信息
          -S：使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节（byte）。默认单位为K（1024 bytes）
          -V：显示vmstat版本信息
         用法：
          vmstat：查看虚拟内存使用情况，r表示运行队列中进程数量，b表示等待IO的进程数量，swpd: 使用虚拟内存大小free: 可用内存大小，buff: 用作缓冲的内存大小，
                  cache: 用作缓存的内存大小，si: 每秒从交换区写到内存的大小，so: 每秒写入交换区的内存大小，bi: 每秒读取的块数，bo: 每秒写入的块数，
                  in: 每秒中断数，包括时钟中断。cs: 每秒上下文切换数。us: 用户进程执行时间(user time)sy: 系统进程执行时间(system time) 
                  id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。wa: 等待IO时间
                  如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。如果bi，bo 长期不等于0，表示内存不足。如果disk 经常不等于0， 且在 b中的队列
                  大于3， 表示 io性能不好。
          vmstat -f:查看徐彤已经fork了多少次
          vmstat -a：查看活跃与不活跃内存
          vmstat -s：查看内存的详细使用情况
          vmstat -：查看磁盘的读写情况
22. netstat：用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。
23. host domain：查询域名的IP， host IP：反向查询IP的域名
24. usermod -G groupNmame username：将用户加入到组
     添加sudo权限：sudo usermod -G admin username 或 sudo usermod -a -G admin username，后者表示用户已经是其他组的成员了
                  图形界面来操作这些，使用 “系统 -> 管理 -> 用户和组”。 选择你想添加到sudo组的用户，点击“属性”，在用户权限的区域，选择“执行系统管理任务”的选择框即可。
                  编辑/etc/sudoers文件。
25. chown username dirOrFile：更改目录或文件的拥有者
26. 查询系统版本： uname -a  vs  lsb_release -a vs more /etc/release
27. 查询CPU核个数：cat /proc/cpuinfo | grep processor | wc -l  查询CPU信息cat /proc/cpuinfo
28. 查看内存信息： cat /proc/meminfo 
29. IPC资源查询：ipcs -m：查看系统使用的IPC共享内存资源
          ipcs -q：查看系统使用的IPC队列
          ipcs -s：查看系统使用的IPC信号量
30. ulimit – a：显示系统所有limit的资源
31. core文件：在一个程序崩溃时，它一般会在指定目录下生成一个core文件。core文件仅仅是一个内存映象(同时加上调试信息)，主要是用来调试的。
          ulimit -c 0：用于阻止core文件的生成
          在core文件夹下gdb -c core它会启动GNU的调试器，来调试core文件，并且会显示生成此core文件的程序名，中止此程序的信号等等，获得程序名后可以用gdb -c core name
          /proc/sys/kernel/core_uses_pid可以控制产生的core文件的文件名中是否添加pid作为扩展，如果添加则文件内容为1，否则为0
32. nl、cat、more、less对比:将文件输出到标准输出，默认加上行号，和cat差不多，不同的是cat将标准输入输出到标准输出或者拼接文件。more和less一般用于显示文件内容超过一屏的内容，并且提供翻页的
    功能。more比cat强大，提供分页显示的功能，less比more更强大，提供翻页，跳转（：num跳转到指定行），查找等命令。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] 
    [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容。less支持上下键，more是不支持的
33. crontab：定时任务，通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等
    工作，当然也可以在shell脚本中设置sleep操作。
    命令格式：crontab [-u user] file crontab [-u user] [ -e | -l | -r ]
             -u user：用来设定某个用户的crontab服务；
             file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。
             -e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。
             -l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。
             -r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。
             -i：在删除用户的crontab文件时给确认提示。
     crontab文件格式：分 时 日 月 星期 要运行的命令
            第1列分钟0～59
            第2列小时0～23（0表示子夜）
            第3列日1～31
            第4列月1～12
            第5列星期0～7（0和7表示星期天）
            第6列要运行的命令 
     新建一个crontab文件：修改默认编辑器，在.profile文件中EDITOR=vim;export EDITOR 默认是vi。创建davecron文件，内容：0,15,30,45 18-06 * * * /bin/echo 'date' > /dev/console
     表示每15分钟运行一次（0,15,30,45表示每个小时的这几个分钟时运行），18-06：表示从18时至06时运行，*表示未设定，域之间空格分割
     最后crontab davecron提交
     
     列出crontab文件：crontab -l （> mycron 利用重定向进行备份）
     编辑crontab文件：crontab -e
     删除crontab文件： crontab -r 上述操作可以指定用户和文件
     
     实例：
          实例1：每1分钟执行一次myCommand
          * * * * * myCommand
          实例2：每小时的第3和第15分钟执行
          3,15 * * * * myCommand
          实例3：在上午8点到11点的第3和第15分钟执行
          3,15 8-11 * * * myCommand
          实例4：每隔两天的上午8点到11点的第3和第15分钟执行
          3,15 8-11 */2  *  * myCommand
          实例5：每周一上午8点到11点的第3和第15分钟执行
          3,15 8-11 * * 1 myCommand
          实例6：每晚的21:30重启smb
          30 21 * * * /etc/init.d/smb restart
          实例7：每月1、10、22日的4 : 45重启smb
          45 4 1,10,22 * * /etc/init.d/smb restart
          实例8：每周六、周日的1 : 10重启smb
          10 1 * * 6,0 /etc/init.d/smb restart
          实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb
          0,30 18-23 * * * /etc/init.d/smb restart
          实例10：每星期六的晚上11 : 00 pm重启smb
          0 23 * * 6 /etc/init.d/smb restart
          实例11：每一小时重启smb
          * */1 * * * /etc/init.d/smb restart
          实例12：晚上11点到早上7点之间，每隔一小时重启smb
          0 23-7 * * * /etc/init.d/smb restart
     注意事项：有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。
     在crontab文件中定义多个调度任务时，需要特别注环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动
     执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。所以注意：
          脚本中涉及文件路径时写全局路径；
          脚本执行要用到java或其他环境变量时，通过source命令引入环境变量
          当手动执行脚本OK，但是crontab死活不执行时,很可能是环境变量惹的祸，可尝试在crontab中直接引入环境变量解决问题。
     注意清理日志/var/log/cron 
     新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。
     系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反
     过来却不行，root用户的任务调度操作可以通过”crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统
     的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。
     当crontab失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错tail -f /var/log/cron。
     千万别乱运行crontab -r。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。
     在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。
     更新系统时间时区后需要重启cron,在ubuntu中服务名为cron:service cron restart
     ubuntu下启动、停止与重启cron:
          sudo /etc/init.d/cron start
          sudo /etc/init.d/cron stop
          sudo /etc/init.d/cron restart

############################程序相关篇

#########配置 + 编译  + 安装

1. 配置： ./configure --help查看可用的配置选项，一般是使用configure文件生成配置，它实际上是一个Linux shell脚本，它可以自动设定源程序以符合各种不同平台上Unix系统的
          特性，并且根据系统叁数及环境产生合适的Makefile文件或是C的头文件(header file)，让源程序可以很方便地在这些不同的平台上被编译连接。
          
          生成过程无需手动编写，过程如下：
          1）我们使用autoscan命令来帮助我们根据目录下的 源代码生成一个configure.in的 模板文件.一般生成的是一个configure.scan文件，我们以它为蓝本复制configure.in文件
             并手动去除无关的语句。
          2）然后执行命令aclocal和autoconf,分别会产生aclocal.m4及configure两个文件，configure.in内容是 一些宏定义,这些宏经autoconf处理后会变成检查系统特性.环境变量.软
             件必须的 参数的 shell脚本.autoconf 是 用来生成自动配置软件源代码脚本（configure）的 工具.configure脚本能独立于autoconf运行,且在 运行的 过程中,不需要用户的
             干预.要生成configure文件,你必须告诉autoconf如何找到你所用的 宏.方式是 使用aclocal程序来生成你的 aclocal.m4.aclocal根据configure.in文件的 内容,自动生成
             aclocal.m4文件.aclocal是 一个perl 脚本程序,它的 定义是 ：”aclocal – create aclocal.m4 by scanning configure.ac”.autoconf从configure.in这个列举编译软件
             时所需要各种参数的 模板文件中创建configure.autoconf需要GNU m4宏处理器来处理aclocal.m4,生成configure脚本.m4是 一个宏处理器.将输入拷贝到输出,同时将宏展开.宏
             可以是 内嵌的 ,也可以是 用户定义的 .除了可以展开宏,m4还有一些内建的 函数,用来引用文件,执行命令,整数运算,文本操作,循环等.m4既可以作为编译器的 前端,也可以单独作
             为一个宏处理器.
          3）新建一个Makefile.am,automake会根据你写的 Makefile.am来自动生成Makefile.in，Makefile.am中定义的 宏和目标,会指导automake生成指定的 代码.例如,宏bin_PROGRAMS
             将导致编译和连接的 目标被生成.
          4）执行configure生成Makefile文件
2. 编译：执行make，makefile的系统编写请参考makefile
         编译的更多选项可以应用CMAKE，它是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件。使用CMake，
         能够使程序员从复杂的编译连接过程中解脱出来。它使用一个名为 CMakeLists.txt 的文件来描述构建过程,可以生成标准的构建文件,如 Unix/Linux 的 Makefile 或Windows Visual C++ 
         的 projects/workspaces 。编译依赖的库
         
         注意编译过程中需要显示指明部分依赖：
           CPPFLAGS -I标记非标准头文件存放路径
           LDFLAGS  -L标记非标准库存放路径
3. 安装：make install 即可

##############################调试篇

1. gdb调试：参见gdb调试
2. pstack跟踪栈空间：pstack 命令必须由相应进程的属主或 root 运行。其核心实现就是使用了gdb以及thread apply all bt命令;一般使用时pstack pid
3. strace分析系统调用：strace常用来跟踪进程执行时的系统调用和所接收的信号。在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由
   用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。
   strace -o output.txt -T -tt -e trace=all -p 28979
   strace -p <process-pid>：实时输出
4. nm：列出目标文件的符号清单。文件可以是对象文件、可执行文件或对象文件库。如果文件没有包含符号信息，nm 命令报告该情况，但不把它解释为出错条件。 nm 命令缺省情况下报告十进制符号表示法
   下的数字值。包含可执行代码的段称为正文段。同样地，数据段包含了不可执行的信息或数据。另一种类型的段，称为 BSS 段，它包含以符号数据开头的块,一般而言，bss段分配于RAM中。
   选项说明：
   -a或–debug-syms：显示所有的符号，包括debugger-only symbols。（默认是不会显示debug符号的）
   -B：等同于–format=bsd，用来兼容MIPS的nm。
   -C或–demangle：将低级符号名解析(demangle)成用户级名字。这样可以使得C++函数名具有可读性。（可以输出函数、对象的具体名称，可读性更强）
   –no-demangle：默认的选项，不需要将低级符号名解析成用户级名。
   -D或–dynamic：显示动态符号。该任选项仅对于动态目标(例如特定类型的共享库)有意义。
   -f format：使用format格式输出。format可以选取bsd、sysv或posix，该选项在GNU的nm中有用。默认为bsd。
   -g或–extern-only：仅显示外部符号。
   -n、-v或–numeric-sort：按符号对应地址的顺序排序，而非按符号名的字符顺序。
   -p或–no-sort：按目标文件中遇到的符号顺序显示，不排序。
   -P或–portability：使用POSIX.2标准输出格式代替默认的输出格式。等同于使用任选项-f posix。
   -s或–print-armap：当列出库中成员的符号时，包含索引。索引的内容包含：哪些模块包含哪些名字的映射。
   -r或–reverse-sort：反转排序的顺序(例如，升序变为降序)。
   –size-sort：按大小排列符号顺序。该大小是按照一个符号的值与它下一个符号的值进行计算的。
   –target=bfdname：指定一个目标代码的格式，而非使用系统的默认格式。
   -u或–undefined-only：仅显示没有定义的符号(那些外部符号)。
   –defined-only:仅显示定义的符号。
   -l或–line-numbers：对每个符号，使用调试信息来试图找到文件名和行号。
   -V或–version：显示nm的版本号。
   –help：显示nm的选项。
   
   符号说明:对于每一个符号来说，其类型如果是小写的，则表明该符号是local的；大写则表明该符号是global(external)的。
   A 该符号的值是绝对的，在以后的链接过程中，不允许进行改变。这样的符号值，常常出现在中断向量表中，例如用符号来表示各个中断向量函数在中断向量表中的位置。
   B 该符号的值出现在非初始化数据段(bss)中。例如，在一个文件中定义全局static int test。则该符号test的类型为b，位于bss section中。其值表示该符号在bss段中的偏移。一般而言，bss段分配于RAM中。
   C 该符号为common。common symbol是未初始话数据段。该符号没有包含于一个普通section中。只有在链接过程中才进行分配。符号的值表示该符号需要的字节数。例如在一个c文件中，定义int test，并且该
     符号在别的地方会被引用，则该符号类型即为C。否则其类型为B。
   D 该符号位于初始化数据段中。一般来说，分配到data section中。
     例如：定义全局int baud_table[5] = {9600, 19200, 38400, 57600, 115200}，会分配到初始化数据段中。
   G 该符号也位于初始化数据段中。主要用于small object提高访问small data object的一种方式。
   I 该符号是对另一个符号的间接引用。
   N 该符号是一个debugging符号。
   R 该符号位于只读数据区。
     例如定义全局const int test[] = {123, 123};则test就是一个只读数据区的符号。
     值得注意的是，如果在一个函数中定义const char *test = “abc”, const char test_int = 3。使用nm都不会得到符号信息，但是字符串”abc”分配于只读存储器中，test在rodata section中，大小为4。
   S 符号位于非初始化数据区，用于small object。
   T 该符号位于代码区text section。
   U 该符号在当前文件中是未定义的，即该符号的定义在别的文件中。
     例如，当前文件调用另一个文件中定义的函数，在这个被调用的函数在当前就是未定义的；但是在定义它的文件中类型是T。但是对于全局变量来说，在定义它的文件中，其符号类型为C，在使用它的文件中，其类型为U。
   V 该符号是一个weak object。
   W The symbol is a weak symbol that has not been specifically tagged as a weak object symbol.
   ? 该符号类型没有定义 
   
   可以用来查询某个可执行文件或者库文件是否包含某些东西：eg： nm libstdc++.6.21.so | grep "GLIB@XXX"
5. objdump: objdump工具用来显示二进制文件的信息，就是以一种可阅读的格式让你更多地了解二进制文件可能带有的附加信息。
   -f 显示文件头信息
   -D 反汇编所有section (-d反汇编特定section)
   -h 显示目标文件各个section的头部摘要信息
   -x 显示所有可用的头信息，包括符号表、重定位入口。-x 等价于 -a -f -h -r -t 同时指定。
   -i 显示对于 -b 或者 -m 选项可用的架构和目标格式列表。
   -r 显示文件的重定位入口。如果和-d或者-D一起使用，重定位部分以反汇编后的格式显示出来。
   -R 显示文件的动态重定位入口，仅仅对于动态目标文件有意义，比如某些共享库。
   -S 尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数。
   -t 显示文件的符号表入口。类似于nm -s提供的信息
6. readelf elf文件格式分析：ELF(Executable and Linking Format)是一种对象文件的格式，用于定义不同类型的对象文件,甚至可以查出文件大端小端模式。
   (Object files)中都放了什么东西、以及都以什么样的格式去放这些东西。是缺省的二进制文件格式。主要包括obj文件、可执行文件、.so文件三种。
   .text section 里装载了可执行代码；
   .data section 里面装载了被初始化的数据；
   .bss section 里面装载了未被初始化的数据；
   以 .rec 打头的 sections 里面装载了重定位条目；
   .symtab 或者 .dynsym section 里面装载了符号信息；
   .strtab 或者 .dynstr section 里面装载了字符串信息；
   参数说明：
   -a –all 全部 Equivalent to: -h -l -S -s -r -d -V -A -I
   -h –file-header 文件头 Display the ELF file header
   -l –program-headers 程序 Display the program headers
   –segments An alias for –program-headers
   -S –section-headers 段头 Display the sections’ header
   --section An alias for –section-headers
   -e –headers 全部头 Equivalent to: -h -l -S
   -s –syms 符号表 Display the symbol table
   --symbols	An alias for –syms
   -n –notes 内核注释 Display the core notes (if present)
   -r –relocs 重定位 Display the relocations (if present)
   -u –unwind Display the unwind info (if present)
   -d –dynamic 动态段 Display the dynamic segment (if present)
   -V –version-info 版本 Display the version sections (if present)
   -A –arch-specific CPU构架 Display architecture specific information (if any).
   -D –use-dynamic 动态段 Use the dynamic section info when displaying symbols
   -x –hex-dump=<number> 显示 段内内容Dump the contents of section <number>
   -w[liaprmfFso] or
   -I –histogram Display histogram of bucket list lengths
   -W –wide 宽行输出 Allow output width to exceed 80 characters
   -H –help Display this information
   -v –version Display the version number of readelf
7. size 查看程序运行时内存占用
   列出的信息有：
   text段：正文段字节数大小，这是由CPU执行的机器指令部分，通常是可共享的，所以即使是频繁执行的程序(如文本编辑器、C编译器和shell等)在存储器中也只
           需要有一个副本。通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构
           也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。
   data段：包含静态变量和已经初始化的全局变量的数据段字节数大小，通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。
   bss段：Block Started by Symbol存放程序中未初始化的全局变量的字节数大小，BBS段属于静态内存分配，在程序开始执行之前，内核将此段中的数据初始化为0或空指针。
   注：text段+data段+bss段=dec段(10进制)，hex段为16进制表示
   C中还有栈、堆：
   栈：又称为堆栈，自动变量以及每次函数调用是所需保存的信息都存放在此段中。是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{} ”中定义的变量(但不包括
       static 声明的变量，static 意味着在数据段中存放变量)。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值
       也会被存放回栈中。由于栈的先进后出特点，所以栈特别方便用来保存/ 恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。
   堆：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc 等函数分配内存时，新分配的内存就被动态添加到堆上(堆被
       扩张)；当利用free 等函数释放内存时，被释放的内存从堆中被剔除(堆被缩减)。
8. file 文件类型查询：也可以查看Core文件是由哪个程序生成 file core.7879
9. strings 查询数据中的文本信息: 一个文件中包含二进制数据和文本数据，如果只需要查看其文本信息，使用这个命令就很方便；过滤掉非字符数据，将文本信息输出
   -a : 扫描所有，不仅仅是数据段
   -d ： 仅扫描数据段，默认也是如此
10. fuser 显示文件使用者: 记住一切皆文件  fuser -v /dev/nvidia*
    -a 显示所有未使用的文件
    -i 杀死进程之前先询问
    -k 杀死进程，通常和查询功能相配
    -l 列出可使用的信号
    -u 显示使用者的id
    -v 啰嗦的输出方式
    -w 杀死只有写权限的进程
    -4 只搜索IPV4
    -6 只搜索IPV6
    -m 显示所有占用指定文件的进程
11. xxd 十六进制显示数据：只显示文本数据

######################性能优化篇
1. nice命令调整程序的优先级
2. top命令：分析系统瓶颈，首先得定位大致的问题出在哪里，是IO瓶颈、CPU瓶颈、内存瓶颈还是程序导致的系统问题。-u 指定用户 -p 指定进程 -i指定间隔 -n指定循环显示的次数
   注意其列出的信息和htop一致，但是没有htop准确
3. htop命令：比top更加可靠，它的安装依赖python2.7.
   进入htop命令后有一堆选项，直接输入指定指令即可，退出按q
   F1：进入帮助界面
   u：输入之后左侧会列出用户列表，然后选择某个用户回车即可观察某个用户的进程
   H：显示或隐藏用户的进程的线程
   h：进入帮助界面
   K：隐藏kernel进程的线程
   k：查询信号，在左侧显示，可上下选择按enter发送给当前进程，按Esc退出
   箭头键：滚动选择
   数字键：搜寻进程pid，直接在主界面输入即可
   F5:输出进程树
   F6：排序
   F2：设置
   F3：搜索，会在首行输入信息回车搜索
   F9：kill掉进程
   F7\8：Nice - +
   F10：退出
   F4：过滤
   l：列出打开的lsof文件
   e：列出进程的环境变量
   a：列出进程的cpu映射
   i：设置io属性
   左边部分从上至下，分别为，cpu、内存、交换分区的使用情况，右边部分为：Tasks为进程总数，当前运行的进程数、Load average为系统1分钟，5分钟，10分钟的平均负载情况、
   Uptime为系统运行的时间。
   PRI：进程的优先级
   NI：进程的优先级别值，默认的为0，可以进行调整
   VIRT：进程占用的虚拟内存值
   RES：进程占用的物理内存值
   SHR：进程占用的共享内存值 
   S：进程的运行状况，R表示正在运行、S表示休眠，等待唤醒、Z表示僵死状态
   %CPU：该进程占用的CPU使用率
   %MEM：该进程占用的物理内存和总内存的百分比
   TIME+：该进程启动后占用的总的CPU时间
   COMMAND：进程启动的启动命令名称
4. 查看内存是否存在瓶颈，使用top指令看比较麻烦，而free命令更为直观:它可以清楚的查看可用内存、共享内存的情况，从而分析是否缺乏内存
5. iotop:类似于top的IO分析器
   -o:仅显示当前在做IO的进程或线程
   -n：循环显示n次
   -d：设置显示间隔
   -P：仅显示进程
   Total DISK READ/WRITE:总共读写（都是速率/s）
   ACTUAL DISK READ/WRITE:实际读写
   TID：线程ID
   PRIO：优先级
   USER：用户
   DISK READ：磁盘读
   DISK WRITE：磁盘读写
   SWAPIN：交换
   IO>：比率
   COMMAND
6. iostat：有效的显示系统的io情况，可以清楚的查看每个设备的读写情况
   首行会列出 %user：用户占用的IO率
             %nice：调整优先级占用的IO率
             %system：系统占用率 
             %iowait：IO等待的时间
             %steal：虚拟CPU与CPU之间的交换率
             %idle：空闲率
   -c：列出CPU利用率情况
   -d：列出设备的使用情况（默认二者都显示）
   -h：人类易读模式   
7. sar vmstat、netstat参看基础部分
8. atop：atop就是一款用于监控Linux系统资源与进程的工具，它以一定的频率记录系统的运行状态，所采集的数据包含系统资源(CPU、内存、磁盘和
         网络)使用情况和进程运行情况，并能以日志文件的方式保存在磁盘中，服务器出现问题后，我们可获取相应的atop日志文件进行分析。
   ATOP列：该列显示了主机名、信息采样日期和时间点
   PRC列：该列显示进程整体运行情况
          sys、usr字段分别指示进程在内核态和用户态的运行时间
          proc字段指示进程总数
          zombie字段指示僵死进程的数量
          exit字段指示atop采样周期期间退出的进程数量
    CPU列：该列显示CPU整体(即多核CPU作为一个整体CPU资源)的使用情况，
          sys、usr字段指示CPU被用于处理进程时，进程在内核态、用户态所占CPU的时间比例
          irq字段指示CPU被用于处理中断的时间比例
          idle字段指示CPU处在完全空闲状态的时间比例
          wait字段指示CPU处在“进程等待磁盘IO导致CPU空闲”状态的时间比例
          CPU列各个字段指示值相加结果为N00%，其中N为cpu核数。
    cpu列：该列显示某一核cpu的使用情况，各字段含义可参照CPU列，各字段值相加结果为100%
    CPL列：该列显示CPU负载情况
           avg1、avg5和avg15字段：过去1分钟、5分钟和15分钟内运行队列中的平均进程数量
          csw字段指示上下文交换次数
          intr字段指示中断发生次数
     MEM列：该列指示内存的使用情况
          tot字段指示物理内存总量
          free字段指示空闲内存的大小
          cache字段指示用于页缓存的内存大小
          buff字段指示用于文件缓存的内存大小
          slab字段指示系统内核占用的内存大小
     SWP列：该列指示交换空间的使用情况
          tot字段指示交换区总量
          free字段指示空闲交换空间大小
     PAG列：该列指示虚拟内存分页情况
          swin、swout字段：换入和换出内存页数
     DSK列：该列指示磁盘使用情况，每一个磁盘设备对应一列，如果有sdb设备，那么增多一列DSK信息
          sda字段：磁盘设备标识
          busy字段：磁盘忙时比例
          read、write字段：读、写请求数量
     NET列：多列NET展示了网络状况，包括传输层(TCP和UDP)、IP层以及各活动的网口信息
          XXXi  字段指示各层或活动网口收包数目
          XXXo 字段指示各层或活动网口发包数目
     有多个视图（默认视图（按g从其他视图切入、内存视图（按m）、命令视图（按c）））
9. gprof
10. valgrind
11. OProfile







