1. python中字符串、整数等对象等号赋值是深拷贝，而列表字典等是浅拷贝，注意赋值前后更改某一个对象产生的变化。
2. __future__模块的特性：把下一个新版本的特性导入到当前版本
   from __future__ import absolute_import：这句代码使得其所属模块无法通过相对路径进行导入，主要是为了防止与系统模块或者其他项目混合。
   from __future__ import unicode_literals：为了解决python2/3在汉字编码上的问题，python2中必须加上u前缀才是Unicode编码，因为其不是默认Unicode编码，而在3中是unicode编码，因此二者在跨平台时容易产生问题，解决方法可以通过six、sys版本判断等，当然这句也是一个。
   from __future__ import division：在python2中使用3的除法。
   from __future__ import print_function：在python2中使用3的print语法，在3中print是一个函数。
   from __future__ import with_statement：with语义是从python2.5开始引入的，如果需要在低版本中使用，加入该句即可。with-statement是现在带有内存管理语言的折中处理方法, 对于c++来说, 可以使用RAII的方式, 一个类有明确的析构函数, 在超出作用域之后会被调用, 在析构函数内进行资源的释放是非常不错的选择. 也体现了c++的高效, 灵活和优雅.Java, python这类语言都无法做到, 但是语言自身的异常机制都非常完善, 不像c++为了兼容c导致异常机制显得有点鸡肋. try..catch..finally就成为了这类语言用来进行资源释放的方式, GC(垃圾回收)回收内存的时间不确定, 无法利用RAII.
   from __future__ import generators：对应yield语法，在2.7中已有使用。
   from __future__ import nested_scopes：这个是修改嵌套函数或lambda函数中变量的搜索顺序，从`当前函数命名空间->模块命名空间`的顺序更改为了`当前函数命名空间->父函数命名空间->模块命名空间`,python2.7.5中开始默认使用。
3. pylint： 是一个 Python 代码分析工具，它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8，具体信息，请参阅参考资料）和有潜在问题的代码。
   对于每一个 Python 模块，Pylint 的结果中首先显示一些"*"字符 , 后面紧跟模块的名字，然后是一系列的 message, message 的格式如下：
   MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE
   MESSAGE_TYPE 有如下几种：
   (C) 惯例。违反了编码风格标准
   (R) 重构。写得非常糟糕的代码。
   (W) 警告。某些 Python 特定的问题。
   (E) 错误。很可能是代码中的错误。
   (F) 致命错误。阻止 Pylint 进一步运行的错误。
   常用参数：
   --generate-rcfile：用于生成一个示例配置文件
   --rcfile=<file>：指定配置文件
   -i <y_or_n>, --include-ids=<y_or_n>：在输出中包含 message 的 id, 然后通过 pylint --help-msg=<msg-id>来查看这个错误的详细信息，这样可以具体地定位错误。
   -r <y_or_n>, --reports=<y_or_n>：默认是 y, 表示 Pylint 的输出中除了包含源代码分析部分，也包含报告部分
   --files-output=<y_or_n>：将每个 module /package 的 message 输出到一个以 pylint_module/package. [txt|html] 命名的文件中，如果有 report 的话，输出到名为 pylint_global.[txt|html] 的文件中。默认是输出到屏幕上不输出到文件里。
   -f <format>, --output-format=<format>：设置输出格式。可以选择的格式有 text, parseable, colorized, msvs (visual studio) 和 html, 默认的输出格式是 text。
   --disable-msg=<msg ids>：禁止指定 id 的 message. 比如说输出中包含了 W0402 这个 warning 的 message, 如果不希望它在输出中出现，可以使用 --disable-msg= W0402。
4. pycodestyle作用域pylint一致。
5. pydoc：查看python模块或者包的doc，使用pydoc [options] module。
   参数：
   -k keywords : 从所有包中查看是否包含关键字
6. python测试框架：
   1）pytest单元测试：
      测试文件规则：
         测试文件以test_开头（以_test结尾也可以）
         测试类以Test开头，并且不能带有 __init__ 方法
         测试函数以test_开头
         断言使用基本的assert即可
      --resultlog=path：生成html格式报告
      --junitxml=path：生成xml格式报告
      其他具体参数参看pytest -h
    2）python自带的unittest模块：以test开头的方法就是测试方法，不以test开头的方法不被认为是测试方法，测试的时候不会被执行
    3）python自带的doctest文档测试，具体使用参看廖雪峰教程。
    4）nose：pip install nose， 使用nosetests [options] [(optional) test files or directories]
